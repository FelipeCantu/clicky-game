{"version":3,"sources":["components/Wrapper/wrapper.js","components/Header/header.js","components/Card/card.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","React","createElement","className","children","Header","score","highscore","Card","onClick","clickCounts","id","alt","name","src","image","App","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","concat","state","cards","gameOver","checkWin","every","card","count","alert","setState","endGame","forEach","find","o","i","console","log","sort","Math","random","_createClass","key","value","_this2","this","map","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7be26b04.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./wrapper.css\";\n\n\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\n\nexport default Wrapper;","import React from 'react';\nimport './header.css';\n\n\nconst Header = props => (\n    <div className=\"header\">\n        <div className=\"title\">{props.children}</div>\n        <div className=\"scores\">\n            Score: {props.score} | Highscore: {props.highscore}\n        </div>\n    </div>\n);\n\nexport default Header;","import React from \"react\";\nimport \"./card.css\";\n\nconst Card = props => (\n    <div className=\"card\" onClick={() => props.clickCounts(props.id)}>\n        <div className=\"img-container\">\n            <img alt={props.name} src={props.image} />\n        </div>\n    </div>\n);\n\nexport default Card;\n\n","import React, { Component } from \"react\";\nimport Wrapper from \"./components/Wrapper/wrapper\";\nimport Header from \"./components/Header/header\";\nimport cards from \"./cards.json\";\nimport Card from \"./components/Card/card\";\n\nclass App extends Component {\n  state = {\n    cards,\n    score: 0,\n    highscore: 0,\n    gameOver: false, // Add a gameOver state\n  };\n\n  checkWin = () => {\n    const allClicked = this.state.cards.every((card) => card.count > 0);\n    if (allClicked) {\n      alert(`You win! All cards clicked.`);\n      this.setState({ gameOver: true });\n    }\n  };\n\n  endGame = () => {\n    if (this.state.score > this.state.highscore) {\n      this.setState({ highscore: this.state.score });\n    }\n    this.state.cards.forEach((card) => {\n      card.count = 0;\n    });\n    alert(`Game Over: \\nScore: ${this.state.score}`);\n    this.setState({ score: 0 });\n  };\n\n  clickCounts = (id) => {\n    if (!this.state.gameOver) { // Check if the game is over\n      this.state.cards.find((o, i) => {\n        if (o.id === id) {\n          if (cards[i].count === 0) {\n            cards[i].count = cards[i].count + 1;\n            this.setState(\n              { score: this.state.score + 1 },\n              () => {\n                console.log(this.state.score);\n                this.checkWin(); // Check for a win after each click\n              }\n            );\n            this.state.cards.sort(() => Math.random() - 0.5);\n            return true;\n          } else {\n            this.endGame();\n          }\n        }\n      });\n    }\n  };\n\n  render() {\n    return (\n      <Wrapper>\n        <Header score={this.state.score} highscore={this.state.highscore}>\n          Naruto Clicky Game\n        </Header>\n        {this.state.cards.map((card) => (\n          <Card\n            clickCounts={this.clickCounts}\n            id={card.id}\n            key={card.id}\n            image={card.image}\n          />\n        ))}\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}